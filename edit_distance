class Solution {
    public static int fn(int i , int j ,String word1, String word2, int [][] dp){
        if(i<0) return j+1;
        if(j<0) return i+1;
        if(dp[i][j]!=-1) return dp[i][j];
        if(word1.charAt(i)==word2.charAt(j)) return dp[i][j] = fn(i-1,j-1,word1,word2,dp);
        return dp[i][j]= Math.min(1 + fn(i-1,j,word1,word2,dp),Math.min(1 + fn(i,j-1,word1,word2,dp),1 + fn(i-1,j-1,word1,word2,dp)));
    }
    public static int tabLation(String s, String t){
        int n = s.length();
        int m = t.length();
        int [][] dp = new int[n+1][m+1];
        for(int i=0;i<=n;i++){
            dp[i][0] = i;
        }
        for(int i=0;i<=m;i++){
            dp[0][i] = i;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s.charAt(i-1)==t.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1];
                }
                else {                    // insert
                    int delete = 1 + dp[i-1][j];
                    int replace = 1 + dp[i-1][j-1];
                    int insert = 1 + dp[i][j-1];
                    dp[i][j] = Math.min(delete,Math.min(replace,insert));

                }      
            }
        }
        return dp[n][m];

    }
    public static int spaceOptimization(String s, String t){
        int n = s.length();
        int m = t.length();
        
        int [] prev = new int[m+1];
        prev[0] = 0;
        for(int i=1;i<=n;i++){
            int [] curr = new int[m+1];
            curr[0] = 0;
            for(int j=1;j<=m;j++){
                if(s.charAt(i-1)==t.charAt(j-1)){
                    curr[j] = prev[j-1];
                }
                else {                    // insert
                    int delete = 1 + prev[j];
                    int replace = 1 + prev[j-1];
                    int insert = 1 + curr[j-1];
                    curr[j] = Math.min(delete,Math.min(replace,insert));

                }      
            }
            prev = curr;
        }
        return prev[m];

    }
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        int [][] dp = new int[n][m];
        for(int [] el : dp){
            Arrays.fill(el,-1);
        }
        // return fn(n-1,m-1,word1,word2,dp);
        return tabLation(word1,word2);
        
    }
}
