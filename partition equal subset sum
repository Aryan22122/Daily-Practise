class Solution {
    public static boolean fn(int idx,  int k , int [] nums,Boolean [][] dp){
        if(idx<0){ return false;};
        if(idx==0){
            if(nums[idx]==k){
                return true;
            }
            return false;
        }
        if(dp[idx][k]!=null) return dp[idx][k];
        boolean pick = false;
        if(nums[idx] <=k){
            pick = fn(idx-1,k-nums[idx],nums,dp);
        }
        boolean nonPick = fn(idx-1,k,nums,dp);
        return dp[idx][k] = pick || nonPick;
    }
    public static boolean tabuLation(int target , int [] nums){
        int n = nums.length;
        boolean [][] dp = new boolean[n][target+1];

        for(int i=0;i<n;i++){
            dp[i][0] = true; 
        }
        if (nums[0] <= target) dp[0][nums[0]] = true;
        for(int i=1;i<n;i++){
            for(int j=1;j<=target;j++){
                boolean pick = (j >= nums[i]) ? dp[i - 1][j - nums[i]] : false;
                boolean notPick = dp[i - 1][j];
                dp[i][j] = pick || notPick;
            }
        }
        return dp[n-1][target];
    }
    public boolean canPartition(int[] nums) {
        int n = nums.length;
        int sum  = 0 ;
        for(int el : nums){
            sum+=el;
        }
        if(sum%2==1){
            return false;
        }
        Boolean [][] dp = new Boolean[n][sum/2+1];
        return fn(n-1,sum/2,nums,dp);
        // return tabuLation(sum/2+1 , nums);
        
    }
}
