// class Solution {
//     public int maxProfit(int[] prices) {
//         int n = prices.length;
//         int [] array =  new int[n];
//         array[0] = prices[0];
//         for(int i=1;i<n;i++){
//             array[i] = Math.min(array[i-1],prices[i]);
//         }
//         int max  = Integer.MIN_VALUE;
//         for(int i=0;i<n;i++){
//             int diff = prices[i] - array[i];
//             max = Math.max(max,diff);
//         }
//         return max;
        
//     }
// }


class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int max = Integer.MIN_VALUE;
        int min = prices[0];
        for(int i=1;i<n;i++){
            int curr = prices[i];
            int diff = curr - min;
            max = Math.max(max,diff);
            min = Math.min(min,curr);
            
        }return max < 0 ?  0 : max;
        
    }
}
