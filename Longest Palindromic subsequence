class Solution {
    public static int fnWithMemo(int i, int j , String s, String t, int [][] dp){
        if(i <0 || j < 0){
            return 0;
        }
         if(dp[i][j]!=-1) return dp[i][j];
        if(s.charAt(i)==t.charAt(j)){
            return dp[i][j] = 1 + fnWithMemo(i-1,j-1,s,t,dp);
        }
       
        int pick = fnWithMemo(i-1,j,s,t,dp);
        int nonPick = fnWithMemo(i,j-1,s,t,dp);
        return dp[i][j] = Math.max(pick,nonPick);
    }
    public static int fn(int i, int j , String s, String t){
        if(i <0 || j < 0){
            return 0;
        }
        if(s.charAt(i)==t.charAt(j)){
            return 1 + fn(i-1,j-1,s,t);
        }
        
        int pick = fn(i-1,j,s,t);
        int nonPick = fn(i,j-1,s,t);
        return Math.max(pick,nonPick);
    }
    public static int tabuLation(String s, String t){
        int n = s.length();
        int [][] dp = new int[n+1][n+1];

        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                if(s.charAt(i-1)==t.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }
                else{
                    int pick = dp[i-1][j];
                    int nonPick = dp[i][j-1];
                    dp[i][j] = Math.max(pick,nonPick);
                }
            }
        }
        return dp[n][n];
    }
    public static int spaceOpt(String s, String t){
        int n = s.length();
        int [] prev = new int[n+1];

        for(int i=1;i<=n;i++){
            int [] curr = new int[n+1];
            for(int j=1;j<=n;j++){
                if(s.charAt(i-1)==t.charAt(j-1)){
                    curr[j] = 1 + prev[j-1];
                }
                else{
                    int pick = prev[j];
                    int nonPick = curr[j-1];
                    curr[j] = Math.max(pick,nonPick);
                }
            }
            prev = curr;
        }

        return prev[n];
    }
    public int longestPalindromeSubseq(String s) {
        int n = s.length();
        String revs = "";
        for(char ch : s.toCharArray()){
            revs = ch + revs;
        }
        int [][] dp = new int[n+1][n+1];
        for(int [] el :  dp){
            Arrays.fill(el,-1);
        }
        // return fn(n-1,n-1,s,revs);
        // return fnWithMemo(n-1,n-1,s,revs,dp);
        // return tabuLation(s,revs);
        return spaceOpt(s,revs);

    }
}
