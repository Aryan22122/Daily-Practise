class Solution {
    public static boolean dfs(int src, boolean [] vis,boolean [] recStack,List<List<Integer>> l){
        vis[src] = true;
        recStack[src] = true;
        for(int el : l.get(src)){
            if(!vis[el]){
                if(dfs(el,vis,recStack,l)) return true;
            }else if(recStack[el]){
                return true;
            }
        }
        recStack[src] = false;
        return false;
    }
    public boolean isCyclic(int V, int[][] edges) {
        List<List<Integer>> l = new ArrayList<>();
        boolean [] vis = new boolean[V];
        boolean[] recStack = new boolean[V];
        for(int i=0;i<V;i++){
            l.add(new ArrayList<>());
        }
        for(int [] el : edges){
            l.get(el[0]).add(el[1]);
        }
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(dfs(i,vis,recStack,l)) return true;
            }
        }
        return false;
    }
}
