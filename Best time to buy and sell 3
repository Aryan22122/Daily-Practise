class Solution {
    public static int fn(int day, int buy , int [] prices, int cap, int [][][] dp){
        if(cap==2){
            return 0;
        }
        if(day >= prices.length){
            return 0;
        }
        if(dp[day][buy][cap]!=-1) return dp[day][buy][cap];
        int profit = 0;
        if(buy==0){
            
            profit = Math.max((-prices[day] + fn(day+1,1,prices,cap,dp)),(0 + fn(day + 1,0,prices,cap,dp)));
        }
        else{
            profit = Math.max(prices[day] + fn(day +1,0,prices,cap+1,dp),(0 + fn(day + 1,1,prices,cap,dp)));
        }
        return dp[day][buy][cap] = profit ;
    }
    public static int tabuLation(int [] prices){
        int n = prices.length;
        int [][][] dp = new int[n+1][2][3];
        int profit = 0;
    
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=1;j++){
                for(int k=0;k<=1;k++){
                    if(j==0){
                        profit = Math.max((-prices[i] + dp[i+1][1][k]),dp[i+1][0][k]);
                    }else{
                        profit = Math.max((prices[i] + dp[i+1][0][k+1]),dp[i+1][1][k]);
                    }
                    dp[i][j][k] = profit;

                }
            }
        }
        return dp[0][0][0];
    }
    public static int spaceOpt(int [] prices){
        int n = prices.length;
        int [][] after = new int[2][3];
        int [][] curr = new int[2][3];
        int profit = 0;
    
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=1;j++){
                for(int k=0;k<=1;k++){
                    if(j==0){
                        profit = Math.max((-prices[i] + after[1][k]),after[0][k]);
                    }else{
                        profit = Math.max((prices[i] + after[0][k+1]),after[1][k]);
                    }
                    curr[j][k] = profit;

                }
            }
            after = curr;
        }
        return after[0][0];
    }
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int [][][] dp = new int[n][2][2];
        for(int [] []el :  dp){
           for(int [] e : el){
                Arrays.fill(e,-1);
           }
        }

        // return fn(0,0,prices,0,dp);
        // return tabuLation(prices);
        return spaceOpt(prices);
    }
}
