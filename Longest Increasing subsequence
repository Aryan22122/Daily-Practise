class Solution {
    public static int fn(int idx, int [] nums,int prev, int [][] dp){
        if(idx>=nums.length){
            return 0;
        }
        if(dp[idx][prev+1]!=-1) return dp[idx][prev+1];
        int pick = 0;
        if(prev==-1 || nums[idx]>nums[prev]){
            pick = 1 + fn(idx+1,nums,idx,dp);
        }
        int nonPick = fn(idx+1,nums,prev,dp);
        return dp[idx][prev+1] = Math.max(pick,nonPick);
    }
    public static int tabuLation(int [] nums){
        int n = nums.length;
        int [][] dp = new int[n+1][n+1];
        for(int i=n-1;i>=0;i--){
            for(int j=i-1;j>=-1;j--){
                int pick  =0;
                if(j==-1 || nums[i]>nums[j]){
                    pick = 1  + dp[i+1][i+1];
                }
                int nonPick = dp[i+1][j+1];
                dp[i][j+1] = Math.max(pick,nonPick);
            }
        }
        return dp[0][0];
    }
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        // int [][] dp = new int[n][n+1];
        // for(int [] el : dp){
        //     Arrays.fill(el,-1);
        // }
        // return fn(0,nums,-1,dp);
        return tabuLation(nums);
        
    }
}
