class Solution {
    public static int fn(int idx, int [] prices, int buy, int [][] dp){
        if(idx >= prices.length) return 0;
        int profit = 0;
        if(dp[idx][buy]!=-1) return dp[idx][buy];
        if(buy==0){
            profit = Math.max(-prices[idx] + fn(idx+1,prices,1,dp),fn(idx+1,prices,0,dp));
        }else{
            profit = Math.max(prices[idx] + fn(idx+2,prices,0,dp), fn(idx+1,prices,1,dp));
        }
        return dp[idx][buy] = profit;
    }
    public static int tabuLation(int [] prices){
        int n = prices.length;
        int [][] dp = new int[n+2][2];
        int profit =0 ;
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=1;j++){
                if(j==0){
                    profit = Math.max(-prices[i] + dp[i+1][1],dp[i+1][0]);
                }else{
                    profit = Math.max(prices[i] + dp[i+2][0],dp[i+1][1]);
                }
                dp[i][j] = profit;
            }
        }
        return dp[0][0];
    }
    public static int spaceOpt(int[] prices) {
    int n = prices.length;
    int[] next = new int[2];
    int[] curr = new int[2];
    int[] front = new int[2];

    for(int i = n - 1; i >= 0; i--) {
        for(int j = 0; j <= 1; j++) {
            int profit;
            if(j == 0) {
                profit = Math.max(-prices[i] + next[1], next[0]);
            } else {
                profit = Math.max(prices[i] + front[0], next[1]);
            }
            curr[j] = profit;
        }
        front[0] = next[0];
        front[1] = next[1];
        next[0] = curr[0];
        next[1] = curr[1];
    }

    return curr[0];
    }

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int [][] dp = new int[n+1][2];
        for(int [] el : dp){
            Arrays.fill(el,-1);
        }
        // return fn(0,prices,0,dp);
        // return tabuLation(prices);
        return spaceOpt(prices);
    }
}
